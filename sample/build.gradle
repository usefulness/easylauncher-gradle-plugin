buildscript {
    repositories {
        google {
            content {
                includeGroupByRegex "com\\.android.*"
                includeGroupByRegex "androidx.*"
                includeGroupByRegex "android.arch.*"
                includeGroupByRegex "com\\.google.*"
            }
        }
        mavenCentral()
        gradlePluginPortal()
        if (project.hasProperty("useMavenLocal")) {
            mavenLocal()
        }
    }
    dependencies {
        classpath "com.project.starter:android:0.64.0"
        classpath "io.github.usefulness:screenshot-testing-plugin:0.16.12"
        if (project.hasProperty("useMavenLocal")) {
            classpath "com.project.starter.local:easylauncher:+"
        } else {
            classpath "com.project.starter:easylauncher"
        }
        def agpVersion = project.properties["agpVersion"]?.toString()
        logger.quiet("agpVersion=$agpVersion")
        if (agpVersion != null) {
            classpath("com.android.tools.build:gradle") {
                version {
                    strictly(agpVersion)
                }
            }
        }
        if (agpVersion != null && agpVersion.startsWith("7.4")) {
            logger.quiet("using kotlin 1.8")
            classpath("org.jetbrains.kotlin:kotlin-gradle-plugin") {
                version {
                    strictly("1.8.21")
                }
            }
        }
    }
}

apply plugin: "com.starter.config"

commonConfig {
    androidPlugin {
        minSdkVersion 23
    }
}

def agpVersion = project.properties["agpVersion"] ?: ""
subprojects {
    pluginManager.withPlugin("com.starter.application.android") {
        android {
            defaultConfig {
                testInstrumentationRunner "com.starter.easylauncher.ScreenshotsRunner"
            }
        }
    }

    pluginManager.withPlugin("com.starter.library.android") {
        android {
            defaultConfig {
                testInstrumentationRunner "com.starter.easylauncher.ScreenshotsRunner"
            }
        }
    }

    pluginManager.withPlugin("com.android.application") {
        pluginManager.apply("io.github.usefulness.screenshot-testing-plugin")

        android {
            buildFeatures {
                buildConfig = true
            }
            testOptions.unitTests.includeAndroidResources true

            packagingOptions {
                exclude "META-INF/LICENSE*"
            }
            applicationVariants.configureEach { variant ->
                variant.mergedFlavor.applicationId = "com.${project.name.replace("-", ".")}.${variant.name}"
                if (variant.flavorName == "") {
                    variant.mergedFlavor.manifestPlaceholders += [appName: "$project.name"]
                } else {
                    variant.mergedFlavor.manifestPlaceholders += [appName: "$variant.flavorName"]
                }
            }
            buildTypes.configureEach {
                matchingFallbacks = ["debug"]
            }

            lintOptions {
                disable("VectorPath", "HardcodedText", "IconDuplicates", "ContentDescription")

                if (agpVersion == "" || agpVersion.startsWith("7.4") || agpVersion.startsWith("8")) {
                    disable("MonochromeLauncherIcon")
                }

                warningsAsErrors = true
                checkReleaseBuilds = false
            }
        }

        tasks.register("recordAll", Copy) {
            group = 'screenshot test'
            from "build/screenshots_tmp/"
            into "screenshots/"

            doLast {
                file("build/screenshots_tmp/").deleteDir()
            }
        }

        android.applicationVariants.configureEach { variant ->
            def recordTask = tasks.findByName("record${variant.name.capitalize()}AndroidTestScreenshotTest")

            if (recordTask != null) {
                def recordAndCopyTask = "recordAndCopy${variant.name.capitalize()}AndroidTestScreenshotTest"

                tasks.register(recordAndCopyTask, Copy) {
                    from "screenshots/"
                    into "build/screenshots_tmp/"
                    dependsOn recordTask
                }

                tasks.recordAll.dependsOn recordAndCopyTask
            }
        }

        tasks.register("verifyAll") {
            group = 'screenshot test'
            android.applicationVariants.configureEach { variant ->
                dependsOn("verify${variant.flavorName.capitalize()}DebugAndroidTestScreenshotTest")
            }
        }

        tasks.register("installAll") {
            group = 'install'
            android.applicationVariants.configureEach { variant ->
                dependsOn("install${variant.name.capitalize()}")
            }
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }

        screenshots {
            addDeps = false
            failureDir = "${buildDir}/failedScreenshots"
        }

        dependencies {
            androidTestImplementation project(":screenshot-test-helpers")
        }
    }

    pluginManager.withPlugin("com.android.library") {
        pluginManager.apply("io.github.usefulness.screenshot-testing-plugin")

        android {
            testOptions.unitTests.includeAndroidResources true

            packagingOptions {
                exclude "META-INF/LICENSE*"
            }

            testVariants.configureEach { variant ->
                variant.mergedFlavor.applicationIdSuffix = variant.name
                if (variant.flavorName == "") {
                    variant.mergedFlavor.manifestPlaceholders += [appName: "$project.name"]
                } else {
                    variant.mergedFlavor.manifestPlaceholders += [appName: "$variant.flavorName"]
                }
            }

            lint {
                disable("VectorPath", "HardcodedText", "IconDuplicates", "ContentDescription")

                if (agpVersion == "" || agpVersion.startsWith("7.4") || agpVersion.startsWith("8")) {
                    disable("MonochromeLauncherIcon")
                }

                warningsAsErrors = true
            }
        }

        tasks.register("recordAll", Copy) {
            group = 'screenshot test'
            from "build/screenshots_tmp/"
            into "screenshots/"

            doLast {
                file("build/screenshots_tmp/").deleteDir()
            }
        }

        android.libraryVariants.configureEach { variant ->
            def recordTask = tasks.findByName("record${variant.name.capitalize()}AndroidTestScreenshotTest")

            if (recordTask != null) {
                def recordAndCopyTask = "recordAndCopy${variant.name.capitalize()}AndroidTestScreenshotTest"

                tasks.register(recordAndCopyTask, Copy) {
                    from "screenshots/"
                    into "build/screenshots_tmp/"
                    dependsOn recordTask
                }

                tasks.recordAll.dependsOn recordAndCopyTask
            }
        }

        tasks.register("verifyAll") {
            group = 'screenshot test'
            android.libraryVariants.configureEach { variant ->
                dependsOn("verify${variant.flavorName.capitalize()}DebugAndroidTestScreenshotTest")
            }
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }

        screenshots {
            addDeps = false
            failureDir = "${buildDir}/failedScreenshots"
        }

        dependencies {
            androidTestImplementation project(":screenshot-test-helpers")
        }
    }

    pluginManager.withPlugin("kotlin") {
        kotlin {
            jvmToolchain(JavaVersion.current().majorVersion.toInteger())
        }
    }
}
